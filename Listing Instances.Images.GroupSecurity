using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Amazon;
using Amazon.EC2;
using Amazon.EC2.Model;

public partial class _Default : Page
{
    //After Adding reference(AWSSDK.dll) and configuring Accesskey and Secretkey on your config file, defining region of your
    //account is necessary.
    AmazonEC2 ec2 = AWSClientFactory.CreateAmazonEC2Client(RegionEndpoint.APSoutheast1);

    protected void Page_Load(object sender, EventArgs e)
    {
        #region Instance List
        //Describe instance belongs to your account
        //see http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-DescribeInstanceAttribute.html for further information.
        DescribeInstancesRequest ec2Request = new DescribeInstancesRequest(); 
        DescribeInstancesResponse ec2Response = ec2.DescribeInstances(ec2Request);
        int numInstances;
        numInstances = ec2Response.DescribeInstancesResult.Reservation.Count;
        var result = ec2.DescribeInstances(ec2Request).DescribeInstancesResult.Reservation;
        numInstanceslbl.Text=numInstances.ToString();
        foreach (Amazon.EC2.Model.Reservation reservation in result)
        {
            foreach (Amazon.EC2.Model.RunningInstance runningInstance in reservation.RunningInstance)
            {
                runningInstancelbl.Text += runningInstance.InstanceId
                    + "; " + runningInstance.InstanceType + "; " + runningInstance.PublicDnsName + "<br/>";
		//this will return the id of the instance, type of the instance(micro,small,etc...) and its DNS name.
            }
        }
        #endregion



        #region SecurityGroup List
	//Security Group that is created to your account
	//see http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ApiReference-cmd-DescribeSecurityGroups.html for further details
        DescribeSecurityGroupsRequest secGroupRequest = new DescribeSecurityGroupsRequest();
        DescribeSecurityGroupsResponse secGroupResponse = ec2.DescribeSecurityGroups(secGroupRequest);
        List<SecurityGroup> secGroups = secGroupResponse.DescribeSecurityGroupsResult.SecurityGroup;
        int numSecu = 0;
        numSecu = secGroupResponse.DescribeSecurityGroupsResult.SecurityGroup.Count;
        numGroupSecuritylbl.Text = numSecu.ToString();

        foreach (SecurityGroup item in secGroups)
        {
            groupSecuritieslbl.Text += item.GroupName + "<br/>";
        }
	     #endregion



	     #region Image List
	//Describe images base on your parameter used in filtering
	//see http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ApiReference-cmd-DescribeImages.html for further information.
	//.WithName is the supported filter name and .WithValue is the valid values corresponding to .WithName
        DescribeImagesRequest imagesRequest = new DescribeImagesRequest();
        var ec2ami = imagesRequest.WithFilter(new Filter().WithName("name").WithValue("win")
        WithName("architecture").WithValue("x86_64").WithName("platform").WithValue("windows").WithName("availability-zone").WithValue("ap-southeast-1a").
        WithName("image-type").WithValue("machine").WithName("root-device-type").WithValue("ebs")).WithOwner("amazon");
        DescribeImagesResponse ec22response = ec2.DescribeImages(ec2ami);
	      var listOfAMI = ec22response.DescribeImagesResult.Image;
       
        int amiCount;
        amiCount = ec22response.DescribeImagesResult.Image.Count;
        numImageslbl.Text = amiCount.ToString();

        foreach (Amazon.EC2.Model.Image Imgs in listOfAMI)
        {
            availableAMIlbl.Text += Imgs.Name.ToString() + "<br/>";

        }
        #endregion
    }
}
